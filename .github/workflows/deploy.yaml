name: Deploy Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: self-hosted
    env:
      ARGOCD_CLI_VERSION: "v2.7.7"
      ARGOCD_NAMESPACE: "argocd"
      BITWARDEN_NAMESPACE: "bitwarden"
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Change working directory
        run: cd /home/sysadmin && pwd
        
      - name: Set up Docker
        run: |
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --yes --batch -q -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update
          sudo apt install -y docker-ce docker-ce-cli containerd.io

      - name: Check and Run LocalStack
        run: |
          if [ "$(docker ps -q -f name=localstack)" ]; then
            echo "LocalStack is already running."
          elif [ "$(docker ps -aq -f name=localstack)" ]; then
            echo "LocalStack container exists but is stopped. Starting..."
            docker start localstack
          else
            echo "LocalStack container not found. Creating and starting..."
            docker run -d --name localstack -p 4566:4566 -p 4510-4559:4510-4559 localstack/localstack
          fi

      - name: Setup Terraform
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor --yes -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update
          sudo apt-get install terraform
                                        
      - name: Deploy with Terraform
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

      - name: Setup k3d Cluster
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

          if k3d cluster list | grep -q "devsecops-cluster"; then
            echo "Cluster 'devsecops-cluster' já existe."
          else
            echo "Criando cluster 'devsecops-cluster'..."
            k3d cluster create devsecops-cluster --agents 2 --port "80:80@loadbalancer"
          fi
      - name: Deploy ArgoCD and Apps
        run: |
          set -e
          echo "Baixando ArgoCD CLI versão ${ARGOCD_CLI_VERSION}"
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/${ARGOCD_CLI_VERSION}/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

          echo "Criando namespaces '${ARGOCD_NAMESPACE}' e '${BITWARDEN_NAMESPACE}'"
          kubectl create namespace ${ARGOCD_NAMESPACE} || true
          kubectl create namespace ${BITWARDEN_NAMESPACE} || true

          echo "Instalando manifestos do ArgoCD"
          kubectl apply -n ${ARGOCD_NAMESPACE} -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

          echo "Aguardando disponibilidade do deployment 'argocd-server'"
          kubectl wait --for=condition=available deployment/argocd-server -n ${ARGOCD_NAMESPACE} --timeout=300s

          echo "Obtendo senha inicial do ArgoCD"
          ARGOCD_PASSWORD=$(kubectl -n ${ARGOCD_NAMESPACE} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)

          kubectl port-forward svc/argocd-server -n argocd 8080:443 &

          echo "Realizando login no ArgoCD"
          echo "${{ secrets.ARGOCD_SERVER_URL }}"
          argocd login ${{ secrets.ARGOCD_SERVER_URL }} \
            --username admin \
            --password "$ARGOCD_PASSWORD" \
            --insecure

          echo "Adicionando repositório ${{
            secrets.ARGOCD_REPO_URL
          }} ao ArgoCD"
          argocd repo add ${{ secrets.ARGOCD_REPO_URL }}

          echo "Aplicando manifestos da aplicação ArgoCD"
          kubectl apply -f apps/argocd/application.yaml -n ${ARGOCD_NAMESPACE}

          echo "Aplicando manifestos da aplicação Bitwarden"
          kubectl apply -f apps/bitwarden/application.yaml -n ${BITWARDEN_NAMESPACE}

          echo "Sincronizando aplicação 'argocd'"
          argocd app sync argocd

          echo "Sincronizando aplicação 'bitwarden'"
          argocd app sync bitwarden
        env:
          ARGOCD_CLI_VERSION: ${{ env.ARGOCD_CLI_VERSION }}
          ARGOCD_NAMESPACE: ${{ env.ARGOCD_NAMESPACE }}
          BITWARDEN_NAMESPACE: ${{ env.BITWARDEN_NAMESPACE }}
