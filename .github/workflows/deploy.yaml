name: Deploy Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment deploy'
        type: choice
        required: true
        default: 'development'
        options:
          - development
      skip_terraform:
        description: 'Skip Terraform?'
        type: boolean
        required: true
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ARGOCD_CLI_VERSION: "v2.7.7"
      ARGOCD_NAMESPACE: "argocd"
      BITWARDEN_NAMESPACE: "bitwarden"
    steps:
      name: Repository Checkout
      uses: actions/checkout@v3

      name: Checkout Code
      uses: actions/checkout@v3

      - name: Change working directory
        run: cd /home/runner/work/challenge-aquarela && pwd

      - name: Set up Docker
        run: |
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --yes --batch -q -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update
          sudo apt install -y docker-ce docker-ce-cli containerd.io

      - name: Check and Run LocalStack
        run: |
          if [ "$(docker ps -q -f name=localstack)" ]; then
            echo "LocalStack is already running."
          elif [ "$(docker ps -aq -f name=localstack)" ]; then
            echo "LocalStack container exists but is stopped. Starting..."
            docker start localstack
          else
            echo "LocalStack container not found. Creating and starting..."
            docker run -d --name localstack -p 4566:4566 -p 4510-4559:4510-4559 localstack/localstack
          fi

      - name: Setup Terraform
        if: ${{ !inputs.skip_terraform }}
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor --yes -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update
          sudo apt-get install terraform
                                        
      - name: Deploy with Terraform
        if: ${{ !inputs.skip_terraform }}
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

      - name: Setup k3d Cluster
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

          if k3d cluster list | grep -q "devsecops-cluster"; then
            echo "Cluster 'devsecops-cluster' already exists."
          else
            echo "Creating cluster 'devsecops-cluster'..."
            k3d cluster create devsecops-cluster --agents 2 \
              --port "80:80@loadbalancer" \
              --port "443:443@loadbalancer" \
              --port "8080:8080@loadbalancer" \
              --port "8081:8081@loadbalancer"
          fi

      - name: Install ArgoCD
        run: |
          set -e
          echo "Downloading ArgoCD CLI version ${ARGOCD_CLI_VERSION}"
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/${ARGOCD_CLI_VERSION}/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

          echo "Creating namespaces '${ARGOCD_NAMESPACE}' and '${BITWARDEN_NAMESPACE}'"
          kubectl create namespace ${ARGOCD_NAMESPACE} || true
          kubectl create namespace ${BITWARDEN_NAMESPACE} || true

          echo "Installing ArgoCD manifests"
          kubectl apply -n ${ARGOCD_NAMESPACE} -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

          echo "Waiting for deployment 'argocd-server' to be available"
          kubectl wait --for=condition=available deployment/argocd-server -n ${ARGOCD_NAMESPACE} --timeout=300s

          kubectl apply -f apps/argocd/manifests/service.yaml
          kubectl apply -f apps/argocd/manifests/loadbalancer.yaml

  deploy-apps:
    needs: deploy
    runs-on: ubuntu-latest
    env:
      ARGOCD_NAMESPACE: "argocd"
      BITWARDEN_NAMESPACE: "bitwarden"
    steps:

      - name: Deploy Applications
        run: |
          echo "Retrieving initial ArgoCD password"
          ARGOCD_PASSWORD=$(kubectl -n ${ARGOCD_NAMESPACE} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "Logging into ArgoCD"
          
          argocd login ${{ vars.ARGOCD_SERVER_URL }} \
            --username admin \
            --password "$ARGOCD_PASSWORD" \
            --insecure

          echo "Adding repository ${{ vars.ARGOCD_REPO_URL }} to ArgoCD"
          argocd repo add ${{ vars.ARGOCD_REPO_URL }} || true

          echo "Applying ArgoCD application manifests"
          kubectl apply -f apps/argocd/application.yaml -n argocd

          echo "Applying Bitwarden application manifests"
          kubectl apply -f apps/bitwarden/application.yaml -n argocd

          echo "Synchronizing application 'argocd'"
          argocd app sync argocd

          echo "Synchronizing application 'bitwarden'"
          argocd app sync bitwarden

  re-test:
    runs-on: ubuntu-latest
    needs: deploy-apps
    steps:
      - name: Testar Deploy dos Serviços do Terraform
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

      - name: Obter Informações do Cluster Kubernetes
        run: |
          
          kubectl cluster-info

      - name: Testar Funcionamento do ArgoCD
        run: |
          
          argocd app list

      - name: Testar Funcionamento do Bitwarden
        run: |
          curl -I http://localhost:8081
          curl http://localhost:8081

      - name: Testar CoreDNS
        run: |  
                  kubectl run dns-test --image=alpine --restart=Never -- sh -c "apk add --no-cache bind-tools && nslookup example.com; exit 0"| sleep 60 && \
                  kubectl logs dns-test && \
                  kubectl delete pod dns-test

      - name: Testar LocalPathProvider
        run: |
          # Comando para testar o LocalPathProvider
          kubectl get sc